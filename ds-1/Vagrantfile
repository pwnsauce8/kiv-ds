#
# *** Demo 3
# Create N backend nodes and 1 frontend node working as a load-balancer.
#

VAGRANTFILE_API_VERSION = "2"
# set docker as the default provider
ENV['VAGRANT_DEFAULT_PROVIDER'] = 'docker'
# disable parallellism so that the containers come up in order
ENV['VAGRANT_NO_PARALLEL'] = "1"
ENV['FORWARD_DOCKER_PORTS'] = "1"
# minor hack enabling to run the image and configuration trigger just once
ENV['VAGRANT_EXPERIMENTAL']="typed_triggers"

unless Vagrant.has_plugin?("vagrant-docker-compose")
  system("vagrant plugin install vagrant-docker-compose")
  puts "Dependencies installed, please try the command again."
  exit
end

# Names of Docker images built:
CLIENT_IMAGE  = "node-election:latest"

# Node definitions
NODE  = { :nameprefix => "client-",  # backend nodes get names: backend-1, backend-2, etc.
              :subnet => "10.0.1.",
              :ip_offset => 100,  # backend nodes get IP addresses: 10.0.1.101, .102, .103, etc
              :image => CLIENT_IMAGE,
              :port => 5000 }

# Number of backends to start:
NODES_COUNT = 11

# Common configuration
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  # Before the 'vagrant up' command is started, build docker images:
  config.trigger.before :up, type: :command do |trigger|
    trigger.name = "Build docker images and configuration files"
    trigger.ruby do |env, machine|


      # --- start of Ruby script ---
      puts "Building nodes configuration"
      File.delete(NODE[:config_file]) if File.exist?(NODE[:config_file])
      file = File.new(NODE[:config_file], 'w')
      (1..NODES_COUNT).each do |i|
          node_name = "#{NODE[:name_prefix]}#{i}"
          file.puts "[[nodes]]"
          file.puts "id = \"#{node_name}\""
          file.puts "host = \"#{node_name}\""
          file.puts "port = #{NODE[:port]}"
          file.puts ""
      end
      file.close

      puts "Building node image:"
      `docker build -t "#{NODE[:image]}" #{NODE[:dir]}`
      # --- end of Ruby script ---

    end
  end

  # Definition of N nodes
  (1..NODES_COUNT).each do |i|
    node_ip_addr = "#{NODE[:subnet]}#{NODE[:ip_offset] + i}"
    node_name = "#{NODE[:name_prefix]}#{i}"

    config.vm.define node_name do |client|
        client.vm.network :private_network, ip: node_ip_addr
        client.vm.hostname = node_name

        client.vm.provider "docker" do |docker|
            docker.image = NODE[:image]
            docker.name = node_name
            docker.env = {
                "ID": node_name,
            }
        end

        client.vm.post_up_message = "Node #{node_name} up and running."
    end
  end

end

# EOF
